#include "constants.h"

MODULE Al_block

CONTAINS

SUBROUTINE check_upscatter(state)

	USE symplecticInt
	USE constants
	USE forcesAndPotential
	USE ISO_FORTRAN_ENV, ONLY : ERROR_UNIT
	IMPLICIT NONE
	real(kind=PREC), intent(inout), dimension(6) :: state
	real(kind=PREC), dimension(6) :: prevState
	real(kind=PREC), dimension(3) :: shiftPos
	
	real(kind=PREC) :: t, fracTravel, predX, predZ, energy, zOff, zeta, hitU
	real(kind=PREC) :: settlingTime
	
	real(kind=PREC), dimension(3,3) :: rotation
	real(kind=PREC), dimension(3) :: blockSize
	real(kind=PREC), dimension(3) :: blockPos
	
	integer :: i, numSteps, nHit
	
	nHit = 0
	t = 0.0_8
	
	settlingTime = 20.0_8 + 50.0_8
	
	rotation(1,1) = 0.305229_8
	rotation(1,2) = -0.939275_8
	rotation(1,3) = -0.156836_8
	rotation(2,1) = 0.944162_8
	rotation(2,2) = 0.319953_8
	rotation(2,3) = -0.0786645_8
	rotation(3,1) = 0.124068_8
	rotation(3,2) = -0.124068_8
	rotation(3,3) = 0.984487_8
	
	blockSize(1) = 0.0125_8
	blockSize(2) = 0.0125_8
	blockSize(3) = 0.00625_8
	
	blockPos(1) = 0.2207_8
	blockPos(2) = 0.127_8
	blockPos(3) = -1.4431_8

	numSteps = settlingTime/dt
	
	DO i=1,numSteps, 1
		CALL symplecticStep(state, dt, energy)
		t = t + dt
	END DO
	
	DO
		prevState = state
		CALL symplecticStep(state, dt, energy)
		t = t + dt
		
		!Shift the neutron position to "block coordinates"
		shiftPos = MATMUL(rotation,prevState(1:3) - blockPos)
		IF (ABS(shiftPos(1)) .LT. blockSize(1)) THEN
			CALL RANDOM_NUMBER(hitU)
			IF (hitU < 0.155) THEN 
				WRITE(1) t-settlingTime, energy, state(5)*state(5)/(2.0_8*MASS_N)
				EXIT
			ELSE IF (prevState(2) .GT. 0 .AND prevState(5) .GT. 0) THEN 
		ELSE IF (ABS(shiftPos(2) .LT. blockSize(2)) THEN
				
		ELSE IF (ABS(shiftPos(3) .LT. blockSize(3)) THEN
				
		END IF
		
		IF (SIGN(1.0_8, state(2)) .NE. SIGN(1.0_8, prevState(2))) THEN
			fracTravel = ABS(prevState(2))/(ABS(state(2)) + ABS(prevState(2)))
			predX = prevState(1) + fracTravel * (state(1) - prevState(1))
			predZ = prevState(3) + fracTravel * (state(3) - prevState(3))
			
			IF (predX > 0.0_8) THEN
				zeta = 0.5_8 - SQRT(predX**2 + (ABS(predZ - zOff) - 1.0_8)**2)
			ELSE
				zeta = 1.0_8 - SQRT(predX**2 + (ABS(predZ - zOff) - 0.5_8)**2)
			END IF
			IF (ABS(predX) < .2 .AND. zeta > 0.0_8 .AND. predZ < (-1.5_8 + zOff + 0.2_8)) THEN
                CALL RANDOM_NUMBER(hitU)
                IF (hitU < 0.155) THEN
                    WRITE(1) t - settlingTime, energy, state(5)*state(5)/(2.0_8*MASS_N)
                    EXIT
                END IF
				IF (prevState(2) > 0 .AND. prevState(5) < 0) THEN
					CALL reflect(prevState, (/0.0_8, 1.0_8, 0.0_8/), (/0.0_8, 0.0_8, 1.0_8/))
					state = prevState
				ELSE IF (prevState(2) < 0 .AND. prevState(5) > 0) THEN
					CALL reflect(prevState, (/0.0_8, -1.0_8, 0.0_8/), (/0.0_8, 0.0_8, 1.0_8/))
					state = prevState
				ELSE
					PRINT *, "UHOH"
				END IF
!				WRITE(1) t - (20.0_8 + 50.0_8), predX, predZ - zOff
!				EXIT
			END IF
			
			IF (t > 2000) THEN
				EXIT
			END IF
		END IF
	END DO
END SUBROUTINE check_upscatter

END MODULE
